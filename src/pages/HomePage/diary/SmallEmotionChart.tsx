import { css } from '@emotion/native';
import { useHeaderHeight } from '@react-navigation/elements';
import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useRoute, useFocusEffect } from '@react-navigation/native';
import {
  Keyboard,
  KeyboardAvoidingView,
  NativeModules,
  Platform,
  ScrollView,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from 'react-native';
import { useKeyboardHandler } from 'react-native-keyboard-controller';
import Animated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';
import Icon from '../../../components/icons/icons';
import Toast from 'react-native-root-toast';
import { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';
import { Carousel } from 'react-native-ui-lib';
import { dailyAnalyze, todayEmotion, todayEmotionCheck } from '../../../apis/analyze';
import {
  emotionData,
  emotionsByColumn,
  HomeStackName,
  MAXIMUM_EMOTION_COUNT,
  MINIMUM_EMOTION_COUNT,
  TabScreenName,
} from '../../../constants/Constants';
import Header from '../../../components/header/header';
import EmotionTitleBox from './emotionTitleBox';
import Analytics from '../../../utils/analytics';
import useRecordedEmotionStore from '../../../utils/emotion-recorded';
import useEmotionStore from '../../../utils/emotion-status';
import { rsFont, rsHeight, rsWidth } from '../../../utils/responsive-size';
import { getUserNickname } from '../../../utils/storageUtils';
import EmotionCard from '../../../components/atoms/EmotionCard/EmotionCard';
import EmotionChip from '../../../components/atoms/EmotionChip/EmotionChip';
import Button from '../../../components/button/button';
import Input from '../../../components/input/input';
import { EmotionDesc, SmallTitle, Title } from './EmotionChart.style';
import {
  KeyboardAwareScrollView,
  KeyboardToolbar,
  KeyboardStickyView,
} from 'react-native-keyboard-controller';
import palette from '../../../assets/styles/theme';
import { RootStackName } from '../../../constants/Constants';

const SmallEmotionChart = ({ navigation, route }) => {
  const insets = useSafeAreaInsets();
  const { selectedEmotions, setSelectedEmotions, addEmotion, removeEmotion } = useEmotionStore();
  const { recordedEmotions, setRecordedEmotions } = useRecordedEmotionStore();
  const scrollViewRef = useRef(null);
  const [text, setText] = useState('');
  const headerHeight = useHeaderHeight();
  const [buttonHeight, setButtonHeight] = useState(0);
  //const route = useRoute();
  //const [dateID, setDate] = useState(route.params?.date);
  //const { date } = route.params;
  //console.log('-----', date);

  const { dateID } = route.params;
  console.log('Í∞êÏ†ï ÏûÖÎ†• ÌéòÏù¥ÏßÄÏóêÏÑú Î∞õÏùÄ dateID', dateID);

  // ÌôîÎ©¥Ïù¥ Îã§Ïãú Ìè¨Ïª§Ïä§Îê† Îïå paramsÎ•º ÌôïÏù∏Ìï¥ÏÑú Ïú†ÏßÄ
  //useEffect(() => {
  //if (route.params?.date) setDate(route.params.date);
  //}, [route.params]);

  useEffect(() => {
    Analytics.watchEmotionRecordScreen();
    //todayEmotionCheck().then((data) => {
    //setText(data.todayFeeling);
    //});
    setSelectedEmotions(recordedEmotions);
  }, []);

  const handleEmotionListClick = async (emotion) => {
    // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Í∞êÏ†ïÏù∏ÏßÄ ÌôïÏù∏
    if (selectedEmotions.some((e) => e.keyword === emotion.keyword)) {
      removeEmotion(emotion.keyword);
    } else {
      // ÏÑ†ÌÉùÎêú Í∞êÏ†ï Ï∂îÍ∞Ä
      if (selectedEmotions.length >= MAXIMUM_EMOTION_COUNT) {
        Toast.show(`Í∞êÏ†ïÏùÄ ${MAXIMUM_EMOTION_COUNT}Í∞úÍπåÏßÄ ÏÑ†ÌÉùÌï† Ïàò ÏûàÏñ¥Ïöîüê∂`, {
          duration: Toast.durations.SHORT,
          position: Toast.positions.CENTER,
        });
        return;
      }
      addEmotion(emotion);
    }
  };

  // ChipÏùÑ ÏÇ≠Ï†úÌïòÎäî Ìï∏Îì§Îü¨
  const handleRemoveEmotion = (emotion) => {
    removeEmotion(emotion.keyword);
  };

  useEffect(() => {
    // Ïä§ÌÅ¨Î°§ ÏõÄÏßÅÏûÑÏùÑ ÏïΩÍ∞Ñ ÏßÄÏó∞ÏãúÌÇ§Í∏∞ ÏúÑÌï¥ setTimeout ÏÇ¨Ïö©
    const timeout = setTimeout(() => {
      if (scrollViewRef.current) {
        scrollViewRef.current.scrollToEnd({ animated: true }); // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÎÅùÏúºÎ°ú Ïù¥Îèô
      }
    }, 100); // 100ms Îí§Ïóê Ïä§ÌÅ¨Î°§ ÏõÄÏßÅÏûÑ

    return () => clearTimeout(timeout); // ÌÉÄÏù¥Î®∏ Ï†úÍ±∞
  }, [selectedEmotions]); // selectedEmotionsÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ

  return (
    <View
      style={css`
        padding-bottom: ${insets.bottom + 'px'};
        flex: 1;
      `}>
      <Header title={dateID} />
      <KeyboardAwareScrollView
        bottomOffset={insets.bottom + 70}
        contentContainerStyle={css`
          background-color: white;
          margin-top: ${rsHeight * 12 + 'px'};
        `}>
        <EmotionTitleBox
          iconName={'emotion-thinking-cookie'}
          mainTitle={'ÏßÄÍ∏à Ïñ¥Îñ§ Í∞êÏ†ïÏù¥ ÎìúÎÇòÏöî?'}
          subTitle={'ÎÇòÏùò ÎßàÏùåÏùÑ ÌëúÌòÑÌï¥Î≥¥ÏÑ∏Ïöî.'}
        />
        <Carousel
          pageWidth={rsWidth * 150} //Ï∫êÎü¨ÏÖÄÏùò ÎÑàÎπÑ
          initialPage={0} //Ïï±Ïù¥ Ï≤òÏùå Ïã§ÌñâÎêòÍ≥† Î≥¥Ïó¨Ï§Ñ Ï¥àÍ∏∞ ÌéòÏù¥ÏßÄ
          itemSpacings={12 * rsWidth}>
          {emotionsByColumn.map((emotions, index) => (
            <View key={index}>
              {emotions.map((emotion, i) => (
                <EmotionChip
                  key={i}
                  group={emotion.group}
                  keyword={emotion.keyword}
                  isSelected={selectedEmotions.some((e) => e.keyword === emotion.keyword)} // ÏÑ†ÌÉùÎêú Í∞êÏ†ïÏù∏ÏßÄ ÌôïÏù∏
                  onPress={() => handleEmotionListClick(emotion)}
                />
              ))}
            </View>
          ))}
        </Carousel>
        <EmotionDesc textAlign={'center'}>
          {selectedEmotions.length > 0
            ? `${selectedEmotions[selectedEmotions.length - 1].keyword} : ${emotionData[selectedEmotions[selectedEmotions.length - 1].keyword].desc}`
            : ''}
        </EmotionDesc>

        {selectedEmotions.length > 0 && (
          <View
            style={css`
              margin-top: ${rsHeight * 12 + 'px'};
              //background-color: gray;
              height: ${rsHeight * 80 + 'px'};
              flex-direction: row;
              flex-wrap: wrap;
              gap: ${rsWidth * 6 + 'px'};
              padding-horizontal: ${rsWidth * 24 + 'px'};
            `}>
            {selectedEmotions.length > 0
              ? selectedEmotions.map((emotion, i) => (
                  <EmotionCard
                    key={i}
                    emotion={emotion}
                    onPress={handleRemoveEmotion}
                    status={'default'}
                  />
                ))
              : ''}
          </View>
        )}
      </KeyboardAwareScrollView>
      <KeyboardStickyView offset={{ closed: 0, opened: Platform.OS === 'ios' ? insets.bottom : 0 }}>
        <View
          style={css`
            padding: ${rsHeight * 10 + 'px'};
            //background-color: pink;
            flex-direction: row;
            gap: ${rsWidth * 10 + 'px'};
            justify-content: center;
          `}>
          {/*<Button
            title={
              selectedEmotions.length < MINIMUM_EMOTION_COUNT
                ? `Ïò§ÎäòÏùò ÎßàÏùåÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî`
                : `Ïø†ÌÇ§ÏóêÍ≤å ÏïåÎ†§Ï£ºÍ∏∞`
            }
            primary={true}
            disabled={
              (selectedEmotions.length < MINIMUM_EMOTION_COUNT && (!text || text.trim() === '')) ||
              selectedEmotions.length > MAXIMUM_EMOTION_COUNT
            }
            onPress={async () => {
              Analytics.clickRecordButton();
              setRecordedEmotions(selectedEmotions); // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
              await todayEmotion(selectedEmotions, text);
              navigation.navigate(TabScreenName.Home);
            }}
          />*/}
          <Button
            title="Í∞êÏ†ïÎßå Í∏∞Î°ùÌïòÍ∏∞"
            primary={false}
            disabled={selectedEmotions.length < MINIMUM_EMOTION_COUNT}
            onPress={async () => {
              //Analytics.clickRecordButton();
              Analytics.clickEmotionRecordButton();
              setRecordedEmotions(selectedEmotions); // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
              await todayEmotion(dateID, selectedEmotions, text);
              navigation.navigate(TabScreenName.Home);
            }}
          />
          <Button
            title="ÎßàÏùåÏùºÍ∏∞ Ïì∞Îü¨Í∞ÄÍ∏∞"
            primary={true}
            onPress={() => {
              Analytics.clickGotoDiaryWriteButton();
              //console.log('ÎßàÏùåÏùºÍ∏∞ date', date);
              //console.log('üî• Navigating with:', date);
              //console.log('üî• date.dateString:', date?.dateString);

              navigation.navigate(HomeStackName.DailyDairy, { dateID: dateID });
              //ÏÉàÎ°úÏö¥ ÌôîÎ©¥Ïù¥ push
            }}
          />
        </View>
      </KeyboardStickyView>
    </View>
  );
};

export default SmallEmotionChart;
